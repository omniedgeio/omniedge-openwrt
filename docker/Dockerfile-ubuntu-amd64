#golang:amd64
FROM amd64/golang:1.18

ARG OPENWRT_SDK
ARG BUILD_ENV
ARG OMNIEDGE_VERSION
ARG HASH256
ARG ARCH

# install golang
RUN apt update
RUN apt -y install wget make git automake build-essential autoconf openssl gzip libssl-dev zip upx

RUN wget -O openwrt-sdk.tar.xz ${OPENWRT_SDK}
RUN xz -q -d openwrt-sdk.tar.xz && tar -xvf openwrt-sdk.tar
RUN mv -f openwrt-sdk-* openwrt-sdk

COPY . .

RUN pwd && ls
RUN ./openwrt-sdk/staging_dir/toolchain-x86_64_gcc-11.2.0_musl/bin/x86_64-openwrt-linux-gcc -v

ENV CC=./openwrt-sdk/staging_dir/toolchain-x86_64_gcc-11.2.0_musl/bin/x86_64-openwrt-linux-gcc
ENV CXX=./openwrt-sdk/staging_dir/toolchain-x86_64_gcc-11.2.0_musl/bin/x86_64-openwrt-linux-g++
ENV CGO_ENABLED=1 
ENV GOARCH=amd64
ENV CROSS_OPENWRT=openwrt
# RUN go generate ./...
# RUN BUILD_ENV=$BUILD_ENV make build
# RUN upx -9 -k /app/out/omniedge
# RUN zip -j /app/out/omniedge.zip /app/out/omniedge

RUN echo "src-link omniedge $GITHUB_WORKSPACE" > ./openwrt-sdk/feeds.conf &&\
    echo 'CONFIG_PACKAGE_omniedge=y &&\
    ' >> ./openwrt-sdk/.config &&\
    cd ./openwrt-sdk &&\
    cat feeds.conf.default >> feeds.conf &&\
    cat feeds.conf &&\
    ./scripts/feeds update -a -f > /dev/null &&\
    make defconfig &&\
    ./scripts/feeds install -d y -f -a &&\
    make package/omniedge/compile V=s &&\
    tree bin/packages/

